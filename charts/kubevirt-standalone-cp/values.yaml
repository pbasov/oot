# @schema title: KubeVirt Cluster Configuration
# @schema description: Configuration for KubeVirt based Kubernetes cluster

# Cluster parameters
controlPlaneNumber: 1 # @schema description: The number of the control plane nodes; type: number; minimum: 1
workersNumber: 1 # @schema description: The number of the worker nodes; type: number; minimum: 1

clusterIdentity: # @schema description: The KubeVirt Service Account credentials secret reference, auto-populated; type: object
  name: "" # @schema description: The KubeVirt Service Account credentials secret name, auto-populated; type: string

cluster: {} # @schema description: Basic cluster information; type: object
  # kubeConfigSecretRef: "kubevirt-config" # @schema description: The name of the secret containing KubeVirt kubeconfig; type: string
  # name: "" # @schema description: The name of the cluster; type: string
  # namespace: "default" # @schema description: The namespace where cluster resources will be created; type: string

clusterNetwork: # @schema description: The cluster network configuration; type: object
  pods: # @schema description: The network ranges from which Pod networks are allocated; type: object
    cidrBlocks: # @schema description: A list of CIDR blocks; type: array; item: string
      - "10.243.0.0/16"
  services: # @schema description: The network ranges from which service VIPs are allocated; type: object
    cidrBlocks: # @schema description: A list of CIDR blocks; type: array; item: string
      - "10.95.0.0/16"

clusterLabels: {} # @schema description: Labels to apply to the cluster; type: object; additionalProperties: true
clusterAnnotations: {} # @schema description: Annotations to apply to the cluster; type: object; additionalProperties: true

# KubeVirt machines parameters
controlPlane: # @schema description: Control plane parameters; type: object
  runStrategy: Always
  cpus: 2 # @schema description: Number of CPUs allocated to control plane nodes; type: integer; minimum: 1
  memory: "4Gi" # @schema description: Memory allocated to control plane nodes; type: string
  bootstrapCheckStrategy: none # @schema description: Strategy for bootstrap checks; type: string; enum: [none, ssh]
  image: ghcr.io/k0rdent-oot/kubevirt-container-disk:debian-latest # @schema description: Container disk image for control plane nodes; type: string

  # Network interface configuration
  defaultNetworkInterface: # @schema description: Default network interface configuration; type: object
    type: bridge # @schema description: Interface type (bridge, masquerade, sriov); type: string; enum: [bridge, masquerade, sriov]
    # ports: [] # @schema description: Port forwarding for masquerade type; type: array
    #   - port: 80
    #     protocol: TCP

  additionalNetworkInterfaces: []
  #  - name: bridge-net
  #    multus:
  #      networkName: bridge-1560
  dataVolumes: []
  #  - name: root
  #    accessModes: ReadWriteMany
  #    storage: 50Gi
  #    volumeMode: Block
  #    storageClassName: block-pool
  #    source:
  #      snapshot:
  #        namespace: kcm-system
  #        name: goldenimage-ubuntu2204
  #  - name: data
  #    accessModes: ReadWriteMany
  #    storage: 1Gi
  #    volumeMode: Block
  #    storageClassName: block-pool
  #    source:
  #      blank: {}
  files: []
  #  - content: |
  #        12345
  #        67896
  #        10111
  #    permissions: "0644"
  #    path: /etc/k0s/test.yaml
  preStartCommands: # @schema description: Commands to run before starting K0s service; type: array; item: string
    - apt update
    - env DEBIAN_FRONTEND=noninteractive apt -y install qemu-guest-agent
    - systemctl enable --now qemu-guest-agent

  # Node selector
  nodeSelector: {} # @schema description: Node selector for VM placement; type: object; additionalProperties: true

  # Network configuration
  networkInterfaceMultiqueue: true # @schema description: Enable network interface multiqueue; type: boolean

  # Cloud-init configuration
  cloudInit: # @schema description: Cloud-init configuration; type: object
    userData: "" # @schema description: Cloud-init user data; type: string

worker: # @schema description: Worker parameters; type: object
  runStrategy: Once
  cpus: 2 # @schema description: Number of CPUs allocated to worker nodes; type: integer; minimum: 1
  memory: "4Gi" # @schema description: Memory allocated to worker nodes; type: string
  bootstrapCheckStrategy: none # @schema description: Strategy for bootstrap checks; type: string; enum: [none, ssh]
  image: ghcr.io/k0rdent-oot/kubevirt-container-disk:debian-latest # @schema description: Container disk image for worker nodes; type: string
  imagePullPolicy: IfNotPresent # @schema description: Image pull policy for container disk; type: string; enum: [Always, IfNotPresent, Never]

  # VM and template annotations
  annotations: {} # @schema description: Annotations to apply to VirtualMachine and template; type: object; additionalProperties: true

  # CPU configuration
  cpu: # @schema description: CPU configuration; type: object
    dedicatedCpuPlacement: false # @schema description: Enable dedicated CPU placement; type: boolean
    isolateEmulatorThread: false # @schema description: Isolate emulator thread; type: boolean
    model: "" # @schema description: CPU model (e.g., host-passthrough); type: string
    numa: {} # @schema description: NUMA configuration; type: object; additionalProperties: true

  # Memory configuration
  memoryConfig: # @schema description: Advanced memory configuration; type: object
    hugepages: {} # @schema description: Hugepages configuration; type: object; additionalProperties: true
    guest: "" # @schema description: Guest memory (e.g., 512Gi); type: string
    requests: "" # @schema description: Memory requests (e.g., 528Gi); type: string
    limits: "" # @schema description: Memory limits (e.g., 528Gi); type: string

  # Device configuration
  devices: # @schema description: Device configuration; type: object
    autoattachMemBalloon: true # @schema description: Auto-attach memory balloon; type: boolean
    autoattachSerialConsole: true # @schema description: Auto-attach serial console; type: boolean
    autoattachGraphicsDevice: true # @schema description: Auto-attach graphics device; type: boolean
    hostDevices: [] # @schema description: Host devices to attach; type: array
    #  - deviceName: nvidia.com/gpu
    #    name: gpu1
    #  - deviceName: mellanox.com/connectx
    #    name: connectx1

  # Node selector
  nodeSelector: {} # @schema description: Node selector for VM placement; type: object; additionalProperties: true

  # Network configuration
  networkInterfaceMultiqueue: true # @schema description: Enable network interface multiqueue; type: boolean

  # Network interface configuration
  defaultNetworkInterface: # @schema description: Default network interface configuration; type: object
    type: bridge # @schema description: Interface type (bridge, masquerade, sriov); type: string; enum: [bridge, masquerade, sriov]
    # ports: [] # @schema description: Port forwarding for masquerade type; type: array
    #   - port: 80
    #     protocol: TCP

  # Cloud-init configuration
  cloudInit: # @schema description: Cloud-init configuration; type: object
    userData: "" # @schema description: Cloud-init user data; type: string

  additionalNetworkInterfaces: []
  #  - name: bridge-net
  #    multus:
  #      networkName: bridge-1560
  dataVolumes: []
  #  - name: root
  #    accessModes: ReadWriteMany
  #    storage: 50Gi
  #    volumeMode: Block
  #    storageClassName: block-pool
  #    source:
  #      snapshot:
  #        namespace: kcm-system
  #        name: goldenimage-ubuntu2204
  #  - name: data
  #    accessModes: ReadWriteMany
  #    storage: 1Gi
  #    volumeMode: Block
  #    storageClassName: block-pool
  #    source:
  #      blank: {}
  files: []
  #  - content: |
  #        12345
  #        67896
  #        10111
  #    permissions: "0644"
  #    path: /etc/k0s/test.yaml
  preStartCommands: # @schema description: Commands to run before starting K0s service; type: array; item: string
    - apt update
    - env DEBIAN_FRONTEND=noninteractive apt -y install qemu-guest-agent
    - systemctl enable --now qemu-guest-agent

# K0s parameters
k0s: # @schema description: K0s parameters; type: object
  version: v1.31.3+k0s.1 # @schema description: K0s version; type: string
  cloudProvider:
    enabled: false # @schema description: Enable cloud provider support; type: boolean
  api: # @schema description: Kubernetes API server parameters; type: object; additionalProperties: true
    extraArgs: {} # @schema description: Map of key-values (strings) for any extra arguments to pass down to Kubernetes api-server process; type: object; additionalProperties: true
  network: # @schema description: Network configuration for K0s; type: object
    vxlanPort: 6789 # @schema description: Port to use for VXLAN tunnels; type: number; minimum: 1; maximum: 65535
  helmCharts: # @schema description: Helm chart deployment configurations; type: object
    kubernetesCSIExternalSnapshotter:
      enabled: false # @schema description: Enable kubernetes-csi-external-snapshotter helm chart in k0s; type: boolean
    kubevirtCSIDriverTenant:
      enabled: false # @schema description: Enable kubevirt-csi-driver-tenant helm chart in k0s; type: boolean
    kubevirtCloudControllerManager:
      enabled: false # @schema description: Enable kubevirt-cloud-controller-manager helm chart in k0s; type: boolean

machineHealthCheck:
  enabled: false
  maxUnhealthy: 40%

# Generic objects creation
objects: [] # @schema description: List of generic Kubernetes objects to create; type: array
